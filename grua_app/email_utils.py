# grua_app/email_utils.py
# Sistema de emails usando Resend para Gr√∫a Style

from django.core.mail import send_mail
from django.conf import settings
from django.utils import timezone
from .models import CodigoVerificacion
import random
import string


def generar_codigo():
    """Genera un c√≥digo aleatorio de 6 d√≠gitos"""
    return ''.join(random.choices(string.digits, k=6))


def enviar_email_bienvenida(user):
    """Env√≠a email de bienvenida al usuario usando Resend"""
    try:
        subject = 'üöó ¬°Bienvenido a Gr√∫a Style!'
        message = f"""
Hola {user.username},

¬°Bienvenido a Gr√∫a Style! üéâ

Tu cuenta ha sido creada exitosamente.
Ya puedes solicitar servicios de gr√∫a las 24 horas del d√≠a, los 7 d√≠as de la semana.

üìã Datos de tu cuenta:
- Usuario: {user.username}
- Email: {user.email}

üåê Para acceder a tu cuenta:
http://127.0.0.1:8000/login/

üöó Servicios disponibles:
- Gr√∫a para veh√≠culos livianos
- Auxilio mec√°nico
- Servicio de emergencia 24/7
- Precios transparentes

¬°Gracias por confiar en Gr√∫a Style para tus necesidades de transporte!

Saludos cordiales,
Equipo Gr√∫a Style üöóüé®
        """

        send_mail(
            subject,
            message,
            settings.DEFAULT_FROM_EMAIL,
            [user.email],
            fail_silently=False,
        )

        print(f"‚úÖ Email de bienvenida enviado exitosamente a: {user.email}")
        return True

    except Exception as e:
        print(f"‚ùå Error enviando email de bienvenida: {e}")
        print(f"   Tipo de error: {type(e)}")
        return False


def enviar_codigo_reset_password(user):
    """Env√≠a c√≥digo de reset por email usando Resend"""
    try:
        # Crear c√≥digo
        codigo = generar_codigo()

        # Eliminar c√≥digos anteriores no usados
        CodigoVerificacion.objects.filter(
            user=user,
            tipo='reset_password',
            usado=False
        ).delete()

        # Crear nuevo c√≥digo
        codigo_obj = CodigoVerificacion.objects.create(
            user=user,
            codigo=codigo,
            tipo='reset_password'
        )

        # Enviar email con c√≥digo
        subject = 'üîë C√≥digo para restablecer contrase√±a - Gr√∫a Style'
        message = f"""
Hola {user.username},

Has solicitado restablecer tu contrase√±a en Gr√∫a Style.

üîë Tu c√≥digo de verificaci√≥n es: {codigo}

‚è±Ô∏è Este c√≥digo es v√°lido por 10 minutos √∫nicamente.

üì± Para restablecer tu contrase√±a:
1. Regresa a la p√°gina web
2. Ingresa este c√≥digo de 6 d√≠gitos
3. Crea tu nueva contrase√±a

üõ°Ô∏è Seguridad:
Si no solicitaste este cambio, puedes ignorar este mensaje de forma segura.
Tu cuenta permanece protegida.

¬øNecesitas ayuda? Cont√°ctanos:
üìß Email: soporte@gruastyle.com
üìû Tel√©fono: +56 9 1234 5678

Saludos,
Equipo Gr√∫a Style üöó
        """

        send_mail(
            subject,
            message,
            settings.DEFAULT_FROM_EMAIL,
            [user.email],
            fail_silently=False,
        )

        print(f"‚úÖ C√≥digo de reset enviado exitosamente a: {user.email}")
        print(f"   C√≥digo generado: {codigo}")

        return codigo_obj

    except Exception as e:
        print(f"‚ùå Error enviando c√≥digo de reset: {e}")
        print(f"   Tipo de error: {type(e)}")
        return None


def enviar_comprobante_solicitud(solicitud):
    """Env√≠a comprobante de solicitud por email usando Resend"""
    try:
        user = solicitud.cliente

        # Calcular tarifas
        tarifa_base = 15000
        tarifa_por_km = 1200
        tarifa_minima = 20000

        if solicitud.distancia_km:
            costo_km = float(solicitud.distancia_km) * tarifa_por_km
            total = max(tarifa_base + costo_km, tarifa_minima)
        else:
            costo_km = 0
            total = tarifa_minima

        # Preparar email
        subject = f'üßæ Comprobante de Solicitud #{solicitud.numero_orden} - Gr√∫a Style'
        message = f"""
Hola {user.username},

¬°Tu solicitud de servicio ha sido creada exitosamente! üéâ

üìã DETALLES DE LA SOLICITUD:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
- N√∫mero de Orden: {solicitud.numero_orden}
- Estado: {solicitud.get_estado_display()}
- Fecha de Solicitud: {solicitud.fecha_solicitud.strftime('%d/%m/%Y %H:%M')}
- Fecha de Servicio: {solicitud.fecha_servicio.strftime('%d/%m/%Y %H:%M')}

üìç UBICACIONES:
- Origen: {solicitud.direccion_origen}
- Destino: {solicitud.direccion_destino}
{f'‚Ä¢ Distancia: {solicitud.distancia_km} km' if solicitud.distancia_km else ''}

üîß PROBLEMA REPORTADO:
{solicitud.descripcion_problema}

üí∞ DETALLE DE COSTOS:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
- Tarifa Base: ${tarifa_base:,}
{f'‚Ä¢ Costo por Distancia ({solicitud.distancia_km} km): ${costo_km:,.0f}' if solicitud.distancia_km else ''}
- TOTAL A PAGAR: ${total:,.0f}

üì± PR√ìXIMOS PASOS:
1. Confirma tu m√©todo de pago
2. Nuestro conductor se pondr√° en contacto contigo
3. Recibir√°s actualizaciones del estado por email

üåê Gestiona tu solicitud:
http://127.0.0.1:8000/dashboard/

üìû ¬øNecesitas ayuda?
- Email: soporte@gruastyle.com
- Tel√©fono: +56 9 1234 5678
- WhatsApp: +56 9 1234 5678

¬°Gracias por confiar en Gr√∫a Style!

Saludos cordiales,
Equipo Gr√∫a Style üöóüé®
        """

        send_mail(
            subject,
            message,
            settings.DEFAULT_FROM_EMAIL,
            [user.email],
            fail_silently=False,
        )

        print(f"‚úÖ Comprobante enviado exitosamente a: {user.email}")
        print(f"   Orden: {solicitud.numero_orden}")
        print(f"   Total: ${total:,.0f}")

        return True

    except Exception as e:
        print(f"‚ùå Error enviando comprobante: {e}")
        print(f"   Tipo de error: {type(e)}")
        return False


def enviar_actualizacion_estado(solicitud, estado_anterior):
    """Env√≠a email cuando cambia el estado de la solicitud"""
    try:
        user = solicitud.cliente

        # Mensajes seg√∫n el estado
        mensajes_estado = {
            'confirmada': '‚úÖ Tu solicitud ha sido confirmada y asignada a un conductor.',
            'en_proceso': 'üöó Tu gr√∫a est√° en camino. Te contactaremos pronto.',
            'completada': 'üéâ ¬°Servicio completado! Gracias por usar Gr√∫a Style.',
            'cancelada': '‚ùå Tu solicitud ha sido cancelada.',
            'pendiente_pago': 'üí≥ Tu solicitud est√° pendiente de pago.',
        }

        emoji_estados = {
            'confirmada': '‚úÖ',
            'en_proceso': 'üöó',
            'completada': 'üéâ',
            'cancelada': '‚ùå',
            'pendiente_pago': 'üí≥',
        }

        estado_actual = solicitud.estado
        emoji = emoji_estados.get(estado_actual, 'üìã')
        mensaje_estado = mensajes_estado.get(
            estado_actual, f'Tu solicitud est√° ahora en estado: {solicitud.get_estado_display()}')

        subject = f'{emoji} Actualizaci√≥n de Solicitud #{solicitud.numero_orden} - Gr√∫a Style'
        message = f"""
Hola {user.username},

Hay una actualizaci√≥n en tu solicitud de servicio:

üìã INFORMACI√ìN DE LA SOLICITUD:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
- N√∫mero de Orden: {solicitud.numero_orden}
- Estado Anterior: {estado_anterior}
- Estado Actual: {solicitud.get_estado_display()}
- Fecha de Actualizaci√≥n: {timezone.now().strftime('%d/%m/%Y %H:%M')}

{emoji} MENSAJE:
{mensaje_estado}

üìç RECORDATORIO DEL SERVICIO:
- Origen: {solicitud.direccion_origen}
- Destino: {solicitud.direccion_destino}
- Fecha de Servicio: {solicitud.fecha_servicio.strftime('%d/%m/%Y %H:%M')}

üåê Ver detalles completos:
http://127.0.0.1:8000/dashboard/

üìû ¬øPreguntas o cambios?
- Email: soporte@gruastyle.com
- Tel√©fono: +56 9 1234 5678

Gracias por usar Gr√∫a Style,
Equipo Gr√∫a Style üöóüé®
        """

        send_mail(
            subject,
            message,
            settings.DEFAULT_FROM_EMAIL,
            [user.email],
            fail_silently=False,
        )

        print(f"‚úÖ Actualizaci√≥n de estado enviada a: {user.email}")
        print(f"   Orden: {solicitud.numero_orden}")
        print(f"   Estado: {estado_anterior} ‚Üí {estado_actual}")

        return True

    except Exception as e:
        print(f"‚ùå Error enviando actualizaci√≥n: {e}")
        print(f"   Tipo de error: {type(e)}")
        return False


def verificar_codigo_reset(user, codigo_ingresado):
    """Verifica c√≥digo de reset"""
    try:
        # Buscar c√≥digo v√°lido (no expirado y no usado)
        codigo_obj = CodigoVerificacion.objects.filter(
            user=user,
            codigo=codigo_ingresado,
            tipo='reset_password',
            usado=False
        ).first()

        if codigo_obj:
            # Verificar si no ha expirado (10 minutos)
            tiempo_limite = timezone.timedelta(minutes=10)
            if timezone.now() - codigo_obj.fecha_creacion > tiempo_limite:
                print(f"‚è±Ô∏è C√≥digo expirado para {user.username}")
                return None

            return codigo_obj

        print(f"‚ùå C√≥digo inv√°lido para {user.username}: {codigo_ingresado}")
        return None

    except Exception as e:
        print(f"‚ùå Error verificando c√≥digo: {e}")
        return None
